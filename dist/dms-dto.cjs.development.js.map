{"version":3,"file":"dms-dto.cjs.development.js","sources":["../src/enum/bulkAdjustmentCountType.ts","../src/enum/bulkDiscountType.ts","../src/enum/BXGXDiscountType.ts","../src/enum/BXGYCountType.ts","../src/enum/BXGYDiscountType.ts","../src/enum/BXGYGetType.ts","../src/enum/BXGYType.ts","../src/enum/cartAdjustmentDiscountType.ts","../src/enum/conditionCountType.ts","../src/enum/conditionOperator.ts","../src/enum/discountConditionType.ts","../src/enum/discountType.ts","../src/enum/productAdjustmentDiscountType.ts","../src/enum/discountFilterType.ts","../src/login.dto.ts","../src/auth.response.dto.ts","../src/utils/dtoValidator.ts"],"sourcesContent":["export enum BulkAdjustmentCountType {\n  ALL = 'ALL',\n  INDIVIDUAL = 'INDIVIDUAL',\n}\n","export enum BulkDiscountType {\n  PERCENT = 'PERCENT',\n  FIXED = 'FIXED',\n  FIXED_PRICE_PER_ITEM = 'FIXED_PRICE_PER_ITEM',\n}\n","export enum BXGXDiscountType {\n  PERCENT = 'PERCENT',\n  FIXED = 'FIXED',\n  FREE = 'FREE',\n}\n","export enum BXGYCountType {\n  ALL = 'ALL',\n  INDIVIDUAL = 'INDIVIDUAL',\n}\n","export enum BXGYDiscountType {\n  PERCENT = 'PERCENT',\n  FIXED = 'FIXED',\n  FREE = 'FREE',\n}\n","export enum BXGYGetType {\n  RANDOM = 'RANDOM',\n  CHEAPEST_PRICE = 'CHEAPEST_PRICE',\n  HIGHEST_PRICE = 'HIGHEST_PRICE',\n}\n","export enum BXGYType {\n  ALL = 'ALL',\n  CATEGORIES = 'CATEGORIES',\n  COMPANIES = 'COMPANIES',\n  PRODUCTS = 'PRODUCTS',\n}\n","export enum CartAdjustmentDiscountType {\n  PERCENT = 'PERCENT',\n  FIXED = 'FIXED',\n  FIXED_PRICE_PER_PRODUCT = 'FIXED_PRICE_PER_PRODUCT',\n}\n","export enum ConditionCountType {\n  FROM_CART = 'FROM_CART',\n  FROM_FILTER = 'FROM_FILTER',\n}\n","export enum ConditionOperator {\n  LESS_THAN = 'LESS_THAN',\n  LESS_THAN_OR_EQUAL = 'LESS_THAN_OR_EQUAL',\n  GREATER_THAN = 'GREATER_THAN',\n  GREATER_THAN_OR_EQUAL = 'GREATER_THAN_OR_EQUAL',\n  EQUAL_TO = 'EQUAL_TO',\n}\n","export enum DiscountConditionType {\n  SUBTOTAL = 'SUBTOTAL',\n  ITEM_QUANTITY = 'ITEM_QUANTITY',\n  LINE_ITEM_COUNT = 'LINE_ITEM_COUNT',\n}\n","export enum DiscountType {\n  PRODUCT_ADJUSTMENT = 'PRODUCT_ADJUSTMENT',\n  CART_ADJUSTMENT = 'CART_ADJUSTMENT',\n  BULK_ADJUSTMENT = 'BULK_ADJUSTMENT',\n  BXGX = 'BXGX',\n  BXGY = 'BXGY',\n}\n","export enum ProductAdjustmentDiscountType {\n  PERCENT = 'PERCENT',\n  FIXED = 'FIXED',\n  FIXED_PRICE_PER_ITEM = 'FIXED_PRICE_PER_ITEM',\n}\n","export enum DiscountFilterType {\n  ALL = 'ALL',\n  PRODUCTS = 'PRODUCTS',\n  COMPANIES = 'COMPANIES',\n  CATEGORIES = 'CATEGORIES',\n}\n","import { IsNotEmpty, Length } from 'class-validator';\n\nexport class LoginDTO {\n  @IsNotEmpty()\n  @Length(11, 11)\n  mobile: string;\n\n  @IsNotEmpty()\n  @Length(6)\n  password: string;\n}\n","import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class AuthResponseDTO {\n  @IsNotEmpty()\n  @IsString()\n  accessToken: string;\n\n  @IsNotEmpty()\n  @IsString()\n  expiresIn: string;\n\n  @IsNotEmpty()\n  @IsString()\n  tokenType: string;\n\n  @IsOptional()\n  @IsString()\n  message?: string;\n}\n","import { ClassConstructor, plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\nconst dtoValidator = async <T extends ClassConstructor<any>>(dto: T, obj: Object) => {\n  const objInstance = plainToClass(dto, obj);\n  const errors = await validate(objInstance);\n  let returnError: string[] = [];\n  if (errors.length > 0) {\n    returnError.push('Response is not valid');\n    errors?.map(({ constraints }) => {\n      Object.values(constraints as Object)?.map(i => {\n        returnError.push(i);\n      });\n    });\n  }\n  return returnError;\n};\n\nexport { dtoValidator };\n"],"names":["LoginDTO","AuthResponseDTO"],"mappings":";;;;;;;;AAAA;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;;ACAA;;;;;;ACAA;;;;;ACAA;;;;;;;;ACAA;;;;;;ACAA;;;;;;;;ACAA;;;;;;ACAA;;;;;;;;ACEA;AAAA;AAAA;WAAAA;;;;;;;ACAA;AAAA;AAAA;WAAAC;;;;;;;;;;;;;;;;;;;iCCEQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}